import streamlit as st 
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import h2o
from h2o.automl import H2OAutoML
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error  # Importa√ß√£o do erro quadr√°tico m√©dio

# Configura√ß√£o da p√°gina (deve ser o primeiro comando relacionado ao Streamlit)
st.set_page_config(page_title="Projeto de Previs√£o dados ONG Passos M√°gicos", page_icon="üìä", layout="wide")

# Configura√ß√£o do t√≠tulo do aplicativo
st.markdown("<p style='font-size:40px; color:#B40C40;'>Datathon | Fiap</p>", unsafe_allow_html=True)

# Criando um menu de navega√ß√£o com `selectbox` ou `radio`
pagina = st.sidebar.radio("Escolha a P√°gina", ["Introdu√ß√£o", "Metodologia", "Dashboard Interativo", "MVP", "An√°lise", "Refer√™ncias"])

# Conte√∫do de cada p√°gina
if pagina == "Introdu√ß√£o":
    st.image('imagens/Passos-magicos-icon-cor.png')
    st.markdown("<h3 style='color:#0367B0;'>Introdu√ß√£o</h3>", unsafe_allow_html=True)
    st.write('''Este trabalho tem como objetivo trazer uma proposta preditiva para mostrar o impacto das a√ß√µes da ONG Passos M√°gicos sobre a comunidade que atendem.
    Os impactos a serem analisados ter√£o como base o perfil dos estudantes atendidos, informa√ß√µes educacionais, informa√ß√µes socioecon√¥micas e as respostas da pesquisa realizada pela ONG.''')

    st.markdown("<h3 style='color:#0367B0;'>Ferramentas utilizadas</h3>", unsafe_allow_html=True)
    st.write('Para a realiza√ß√£o deste trabalho, foi utilizado as seguintes ferramentas:')
    st.write('Python: utilizado para toda a tratativa inicial das bases como organiza√ß√£o das colunas, remo√ß√£o de espa√ßos e duplicidades e valores nulos, assim como para a realiza√ß√£o da previs√£o dos pre√ßos do petr√≥leo por meio do modelo de machine learning PROPHET.')
    st.write('PowerBI: utilizado para a cria√ß√£o de um dashboard interativo compilando as informa√ß√µes dispon√≠veis do pre√ßo do petr√≥leo, previs√£o e acontecimentos que influenciam na explica√ß√£o da varia√ß√£o do pre√ßo.')
    st.write('Streamlit: utilizado para desenvolvimento do MVP (Minimum Viable Product, ou Produto M√≠nimo Vi√°vel) e disponibiliza√ß√£o das etapas e informa√ß√µes do projeto.')

elif pagina == "Metodologia":
    st.image('imagens/Passos-magicos-icon-cor.png')
    st.markdown("<h3 style='color:#0367B0;'>Metodologia</h3>", unsafe_allow_html=True)
    st.markdown("<h3 style='color:#145089;'>Origem e an√°lise dos dados</h3>", unsafe_allow_html=True)
    st.write('''Os dados utilizados nesta an√°lise foram extra√≠dos do Drive disponibilizado pela FIAP. 
    Ap√≥s a extra√ß√£o, os dados foram salvos em um arquivo excel, passaram por um tratamento inicial onde foi ajustado as acentua√ß√µes em algumas palavras e importados no python para demais tratamentos necess√°rios conforme abaixo:''')
    st.image('imagens/1.1 Leitura e tratamento de Dados.png')
    st.image('imagens/1.2 Leitura e tratamento de Dados.png')

    st.markdown("<h3 style='color:#145089;'>An√°lises iniciais</h3>", unsafe_allow_html=True)
    st.write('An√°lise de desempenho escolar')
    st.image('imagens/2.1 An√°lise desempenho escolar.png')
    st.image('imagens/2.2 An√°lise desempenho escolar - defasagem.png')
    st.write('Correla√ß√µes')
    st.image('imagens/3.1 Visualiza√ß√£o de Dados - Notas vs frequ√™ncia.png')
    st.image('imagens/3.1 Gr√°fico - Distribui√ß√£o das notas vs Frequ√™ncia.png')
    st.image('imagens/3.2 Visualiza√ß√£o de Dados - Idade vs frequ√™ncia.png')
    st.image('imagens/3.2 Gr√°fico - Distribui√ß√£o de idades vs Frequ√™ncia.png')
    st.image('imagens/3.3 Gr√°fico - M√©dia de notas vs Faixa et√°ria.png')
    st.image('imagens/3.4 Gr√°fico - Notas vs Faixa et√°ria.png')
    st.image('imagens/3.5 Gr√°fico - Nota vs Aprova√ß√£o.png')
    st.image('imagens/3.6 Gr√°fico - Desempenho vs tipo de escola.png')
    st.image('imagens/3.7 Gr√°fico - Desempenho vs Idade.png')
    st.image('imagens/3.8 Visualiza√ß√£o de Dados - Faltas vs Reprova√ß√£o.png')
    st.image('imagens/3.8 Gr√°fico - Idade vs reprova√ß√£o.png')
    st.image('imagens/3.9 Visualiza√ß√£o de Dados - Previs√£o de comportamento - Feedbacks.png')
    st.image('imagens/3.9 Gr√°fico - Previs√£o de comportamento - Feedbacks.png')
    st.image('imagens/3.9 Visualiza√ß√£o de Dados - Previs√£o de comportamento.png')
    st.image('imagens/3.9 Gr√°fico - Previs√£o.png')
    st.image('imagens/3.9 Visualiza√ß√£o de Dados - Previs√£o de comportamento - Correla√ß√£o e treinamento.png')
    st.image('imagens/3.9 Gr√°fico - Previs√£o de comportamento - Correla√ß√£o e treinamento.png')
    st.image('imagens/4.1 Gr√°fico - Pedra vs Idade.png')
    st.image('imagens/5.1 Gr√°fico - Qtd Feedbacks vs Tipo de comportamento.png')
    st.image('imagens/6.1 Visualiza√ß√£o de Dados - Feedback vs tempo de estudo.png')
    st.image('imagens/6.1 Gr√°fico - Feedback vs tempo de estudo.png')
    st.image('imagens/7.1 Gr√°fico - Matriz de confus√£o.png')
    st.image('imagens/8.1 Gr√°fico - Previs√£o vs Feedback.png')
    st.image('imagens/9.1 Visualiza√ß√£o de Dados - Acur√°cia do modelo.png')
    st.image('imagens/9.1 Gr√°fico - Acur√°cia do modelo.png')

elif pagina == "Dashboard Interativo":
    # URL do painel do Power BI
    powerbi_url = 'https://app.powerbi.com/view?r=eyJrIjoiNzFkOTBjMGMtYmM3ZC00YzE0LWI1YjYtNjdhNTE0MzE0NWIyIiwidCI6IjExZGJiZmUyLTg5YjgtNDU0OS1iZTEwLWNlYzM2NGU1OTU1MSIsImMiOjR9&pageName=cb3dc97fa06772a0514d'

    # HTML com iframe para incorporar
    iframe_html = f"""<iframe title="DataThon2025" width="100%" height="800" src="{powerbi_url}" frameborder="0" allowFullScreen="true"></iframe>"""
    
    # Exibe o painel do Power BI usando markdown com HTML
    st.markdown(iframe_html, unsafe_allow_html=True)

elif pagina == "MVP":
    # Caixas para o usu√°rio inserir os valores das vari√°veis
    st.write("Insira os valores das vari√°veis:")

    IDA = st.number_input("IDA", min_value=0.0, max_value=10.0, step=0.1)
    IPV = st.number_input("IPV", min_value=0.0, max_value=10.0, step=0.1)
    IAA = st.number_input("IAA", min_value=0.0, max_value=10.0, step=0.1)
    IEG = st.number_input("IEG", min_value=0.0, max_value=10.0, step=0.1)
    IPS = st.number_input("IPS", min_value=0.0, max_value=10.0, step=0.1)
    IPP = st.number_input("IPP", min_value=0.0, max_value=10.0, step=0.1)
    IAN = st.number_input("IAN", min_value=0.0, max_value=10.0, step=0.1)

    # Dados de exemplo (para treino do modelo)
    example_data = {
        "IDA": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        "IPV": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        "IAA": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        "IEG": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        "IPS": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        "IPP": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        "IAN": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        "target": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # Vari√°vel alvo
    }

    # Criar DataFrame
    data = pd.DataFrame(example_data)

    # Verificar se as colunas necess√°rias est√£o presentes
    features = ["IDA", "IPV", "IAA", "IEG", "IPS", "IPP", "IAN"]
    if all(feature in data.columns for feature in features):
        # Separar as features e a vari√°vel alvo
        X = data[features]
        y = data["target"]

        # Dividir os dados em treino e teste
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        # Treinar o modelo
        model = RandomForestRegressor(random_state=42)
        model.fit(X_train, y_train)

        # Predi√ß√£o com base nos valores fornecidos pelo usu√°rio
        if st.button("Fazer Previs√£o"):
            user_input = np.array([[IDA, IPV, IAA, IEG, IPS, IPP, IAN]])
            prediction = model.predict(user_input)[0]

            # Classificar a predi√ß√£o
            if 2.405 <= prediction <= 5.506:
                categoria = "Quartzo"
            elif 5.506 < prediction <= 6.868:
                categoria = "√Ågata"
            elif 6.868 < prediction <= 8.230:
                categoria = "Ametista"
            elif 8.230 < prediction <= 9.294:
                categoria = "Top√°zio"
            else:
                categoria = "Fora dos intervalos"

            # Exibir os resultados
            st.write(f"Predi√ß√£o: {prediction:.2f}")
            st.write(f"Categoria: {categoria}")
    else:
        st.error("As colunas necess√°rias n√£o est√£o presentes no DataFrame!")

elif pagina == "Refer√™ncias":
    st.image('imagens/Passos-magicos-icon-cor.png')  # Agora somente aparece na p√°gina Refer√™ncias
    st.markdown("<h3 style='color:#0367B0;'>Refer√™ncias</h3>", unsafe_allow_html=True)
    st.write('''
        1. https://www.h2o.ai/products/h2o-automl/
         2. https://www.streamlit.io/
        3. https://www.datacamp.com/community/tutorials/introducing-h2o-automl-python
        ''')
